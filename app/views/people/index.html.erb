<script>
  
  var PatientsIDs = "";
  var PatientsIDsBatch = {};
  var ids = []
  var count = 0;

  var PatientIDsFromMaster = {};

  function getListOfPatientIDs() {
    PatientsIDsBatch = {};
    count = 1;
    PatientsIDsBatch[count] = [];
    PatientsIDs = PatientsIDs.sort(function(a,b){return a - b});

    for(var i = 0; i < PatientsIDs.length; i++) {
      if (PatientsIDsBatch[count].length < 11) {
        ids.push(PatientsIDs[i]);
        PatientsIDsBatch[count] = ids;
      }else{
        count++;
        ids = [];
        ids.push(PatientsIDs[i]);
        PatientsIDsBatch[count] = ids;
      }
    }
    syncWithMaster();
  }
 
 function availableIDS() {
    if (window.XMLHttpRequest) {// code for IE7+, Firefox, Chrome, Opera, Safari 
      xmlhttp=new XMLHttpRequest();                                              
    }else{// code for IE6, IE5                                                   
      xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");                            
    }                                                                            
                                                                                
    xmlhttp.onreadystatechange=function() {                                      
      if (xmlhttp.readyState==4 && xmlhttp.status==200) {                        
        var results = eval(xmlhttp.responseText);                                      
        if(results) {
           PatientsIDs = results;
           getListOfPatientIDs();
        }
      }                                                                          
    }                                                                            
                                                                                
    xmlhttp.open("GET","/people/proxy_people_to_sync" , true);
      
    xmlhttp.send();

 } 

  function syncWithMaster() {
    for(key in PatientsIDsBatch) {
      sendDemographicsFile(key , PatientsIDsBatch[key].join(','));
    }
    availableMasterIDS();
  }



 function syncWithProxy(){
     for(key in PatientIDsFromMaster) {
      getDemographicsFile(key , PatientIDsFromMaster[key].join(','));
    }
 }
 

  function sendDemographicsFile(key , patient_ids) {
    if(patient_ids.length < 1)
      return;


    if (window.XMLHttpRequest) {// code for IE7+, Firefox, Chrome, Opera, Safari 
      xmlhttp=new XMLHttpRequest();                                              
    }else{// code for IE6, IE5                                                   
      xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");                            
    }                                                                            
                                                                                
    xmlhttp.onreadystatechange=function() {                                      
      if (xmlhttp.readyState==4 && xmlhttp.status==200) {                        
        var results = xmlhttp.responseText;                                      
        if(results == "updated master") {
          delete PatientsIDsBatch[key];
          syncWithMaster();
        }
      }                                                                          
    }                                                                            
                                                                                
    var params = "patient_ids=" + patient_ids;
    xmlhttp.open("GET","/people/sync_demographics_with_master?" + params , true);              
    xmlhttp.send();

  }


  function availableMasterIDS() {
    if (window.XMLHttpRequest) {// code for IE7+, Firefox, Chrome, Opera, Safari
      xmlhttp=new XMLHttpRequest();
    }else{// code for IE6, IE5
      xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
    }

  xmlhttp.onreadystatechange=function() {
      if (xmlhttp.readyState==4 && xmlhttp.status==200) {
        var results = eval(xmlhttp.responseText);
        if(results) {
          a = JSON.parse(results);
          a.sort(function(x,y){return x - y})
          ids2 = [];
          count = 1;
          PatientIDsFromMaster[count] = [];
          for(var i = 0; i < a.length; i++) {
            if (PatientIDsFromMaster[count].length < 11) {
              ids2.push(a[i]);
              PatientIDsFromMaster[count] = ids2;
            }else{
              count++;
              ids2 = [];
              ids2.push(a[i]);
              PatientIDsFromMaster[count] = ids2;
            }
          }
          if(PatientIDsFromMaster[1].length > 0)
            syncWithProxy();
           
        }
      }
    }        

  xmlhttp.open("GET","/people/master_people_to_sync" , true);

  xmlhttp.send();

 }

  function getDemographicsFile(key , patient_ids) {
    if (window.XMLHttpRequest) {// code for IE7+, Firefox, Chrome, Opera, Safari
      xmlhttp=new XMLHttpRequest();
    }else{// code for IE6, IE5
      xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
    }

    xmlhttp.onreadystatechange=function() {
      if (xmlhttp.readyState==4 && xmlhttp.status==200) {
        var results = xmlhttp.responseText;
        if(results == "updated proxy") {
          delete PatientIDsFromMaster[key];
          syncWithProxy();
        }
      }
    }

    var params = "patient_ids=" + patient_ids;
    xmlhttp.open("GET","/people/sync_demographics_with_proxy?" + params , true);
    xmlhttp.send();

  }

</script>


<h2>Listing people</h2>

<table class="table">
  <tr>
    <th>NPID</th>
    <th>Created at</th>
    <th>Last updated by</th>
    <th>Last updated at site</th>
    <th>Version</th>
    <th style="width: 130px;"></th>
  </tr>

  <% @people.each do |person| %>
  <%#=raise person.to_yaml%>
    <tr>
      <td><%= link_to person.npid_value, person %></td>
      <td><%= person.created_at %></td>
      <td><%= person.creator_id || ' - unknown - ' %></td>
      <td><%= Site.find_by_id(person.creator_site_id).name rescue ' - unknown - ' %></td>
      <td><%= person.version_number.last(12) rescue 0 %></td>
      <td>
        <%= link_to 'Show', person if can? :show, person %> |
        <%= link_to 'Edit', edit_person_path(person) if can? :edit, person %> |
        <%#= link_to 'Sync', remote_person_path(person) if can? :show_remote, person %>
      </td>
    </tr>
  <% end %>
</table>

<%= will_paginate @people %>
<br />
<p>
  <div id="new" align="center">
    <%= link_to 'New Person', new_person_path %>
  </div>
</p>

<br />                                                                          

<%if Site.proxy? %>
  <%#= link_to 'Sync With Master', "javascript:availableIDS();" %>
<%end%>
